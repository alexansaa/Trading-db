name: trading-db

services:
  sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SA_PASSWORD}      # provided by your pipeline or docker/.env
    ports:
      - "1433:1433"                     # optional; remove if you don't want host access
    volumes:
      - mssql-data:/var/opt/mssql
    networks:
      core:
        aliases:
          - trading-sql                 # <-- stable DNS name on trading-core
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P \"$SA_PASSWORD\" -C -Q \"SELECT 1\" >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  db-bootstrap:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      sql:
        condition: service_healthy
    networks: { core: {} }
    entrypoint: ["/bin/bash","-lc"]
    command: >
      "/opt/mssql-tools18/bin/sqlcmd -S trading-sql,1433 -U sa -P ${SA_PASSWORD} -C
      -Q \"IF DB_ID('trading') IS NULL CREATE DATABASE trading;\""

  flyway:
    image: flyway/flyway:10
    depends_on:
      db-bootstrap:
        condition: service_completed_successfully
    # EITHER pass settings via env (no conf file) â€¦
    environment:
      FLYWAY_URL: jdbc:sqlserver://trading-sql:1433;database=trading;encrypt=true;trustServerCertificate=true
      FLYWAY_USER: sa
      FLYWAY_PASSWORD: ${SA_PASSWORD}
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
      FLYWAY_BASELINE_ON_MIGRATE: "true"
    volumes:
      - ../migrations:/flyway/sql:ro
    command: migrate
    networks: { core: {} }

volumes:
  mssql-data:

networks:
  core:
    external: true
    name: trading-core                  # <-- shared external network
