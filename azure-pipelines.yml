# Pull SA_PASSWORD from Library
variables:
- group: trading-db-vars

trigger:
- main

pool:
  name: Default   # <-- make sure this matches your self-hosted agent pool name

stages:
- stage: Deploy_DB
  jobs:
  - job: up_compose
    displayName: Docker Compose Up (DB + Flyway)
    steps:
    - checkout: self
      clean: true

    - script: |
        set -euo pipefail
        # Ensure the secret reached the job
        if [ -z "${SA_PASSWORD:-}" ]; then
          echo "ERROR: SA_PASSWORD is empty. Did you authorize the variable group or mark the variable as secret?" >&2
          exit 1
        fi

        mkdir -p docker
        # Write .env (do not echo secret to logs)
        printf "SA_PASSWORD=%s\n" "$SA_PASSWORD" > docker/.env

        # Normalize line endings if tool exists
        if command -v dos2unix >/dev/null 2>&1; then dos2unix docker/.env || true; fi

        echo "Wrote docker/.env (bytes: $(wc -c < docker/.env))"
      displayName: "Create .env with SA_PASSWORD"
      env:
        SA_PASSWORD: $(SA_PASSWORD)   # injected from Variable Group

    - script: |
        set -euo pipefail
        cd docker
        docker compose pull || true
        docker compose up -d
        docker compose ps
      displayName: "docker compose up -d"

    - script: |
        set -euo pipefail

        echo "Waiting for trading-mssql to be healthy..."
        for i in {1..30}; do
          STATUS=$(docker inspect --format '{{.State.Health.Status}}' trading-mssql || echo "unknown")
          if [ "$STATUS" = "healthy" ]; then
            echo "OK: trading-mssql is healthy."
            break
          fi
          echo "Current status: $STATUS (attempt $i/30)"; sleep 3
          if [ $i -eq 30 ]; then
            echo "ERROR: SQL container not healthy in time"; exit 1
          fi
        done

        echo "==== Flyway logs (tail) ===="
        docker compose -f docker/docker-compose.yml logs --no-color flyway | tail -n 200 || true

        PW="$SA_PASSWORD"

        docker exec trading-mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$PW" -C -Q "SELECT name FROM sys.databases;"
        docker exec trading-mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$PW" -C -Q "USE trading; SELECT name FROM sys.tables ORDER BY name;"
        docker exec trading-mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$PW" -C -Q "USE trading; SELECT installed_rank,version,description,success FROM dbo.flyway_schema_history ORDER BY installed_rank;"
      displayName: "Verify DB & migrations"
      env:
        SA_PASSWORD: $(SA_PASSWORD)
