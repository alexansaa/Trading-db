trigger:
- main

pool:
  name: Default   # <-- make sure this matches your self-hosted agent pool name

stages:
- stage: Deploy_DB
  jobs:
  - job: up_compose
    displayName: Docker Compose Up (DB + Flyway)
    steps:
    - checkout: self
      clean: true

    - script: |
        set -euo pipefail
        # Ensure the secret reached the job
        if [ -z "${SA_PASSWORD:-}" ]; then
          echo "ERROR: SA_PASSWORD is empty. Did you authorize the variable group or mark the variable as secret?" >&2
          exit 1
        fi

        mkdir -p docker
        # Write .env (do not echo secret to logs)
        printf "SA_PASSWORD=%s\n" "$SA_PASSWORD" > docker/.env

        # Normalize line endings if tool exists
        if command -v dos2unix >/dev/null 2>&1; then dos2unix docker/.env || true; fi

        echo "Wrote docker/.env (bytes: $(wc -c < docker/.env))"
      displayName: "Create .env with SA_PASSWORD"
      env:
        SA_PASSWORD: $(SA_PASSWORD)   # injected from Variable Group

    - script: |
        set -euo pipefail
        cd docker
        docker compose pull || true
        docker compose up -d
        docker compose ps
      displayName: "docker compose up -d"

    - script: |
        set -euo pipefail
        # Work from the compose dir
        cd docker

        # Get the container ID for the 'sql' service (works regardless of auto-naming)
        SQL_CID="$(docker compose ps -q sql)"
        if [ -z "${SQL_CID}" ]; then
          echo "ERROR: SQL container not found. compose ps:"
          docker compose ps
          exit 1
        fi
        echo "SQL container: ${SQL_CID}"

        echo "Waiting for SQL to accept queries..."
        # Try a real query inside the container (works even without a healthcheck)
        for i in {1..40}; do
          if docker exec "${SQL_CID}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -C -Q "SELECT 1" >/dev/null 2>&1; then
            echo "SQL is ready."
            break
          fi
          echo "Not ready yet ($i/40)"; sleep 3
          if [ $i -eq 40 ]; then
            echo "ERROR: SQL not ready in time"
            exit 1
          fi
        done

        echo "==== Flyway logs (tail) ===="
        docker compose logs --no-color flyway | tail -n 200 || true

        # Smoke checks
        docker exec "${SQL_CID}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -C -Q "SELECT name FROM sys.databases;"
        docker exec "${SQL_CID}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -C -d trading -Q "SELECT name FROM sys.tables ORDER BY name;"
        docker exec "${SQL_CID}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -C -d trading -Q "SELECT installed_rank,version,description,success FROM dbo.flyway_schema_history ORDER BY installed_rank;"
      displayName: "Verify DB & migrations"
      env:
        SA_PASSWORD: $(SA_PASSWORD)
